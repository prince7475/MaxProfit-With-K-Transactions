Max Profit With K Transactions
You are given an array of integers representing the prices of a single stock on various days 
(each index in the array represents a different day). You are also given
an integer k, which represents the number of transactions you are allowed to make.
One transaction consists of buying the stock on a given day and selling it on
another, later day. Write a function that returns the maximum profit that you can 
make buying and selling the stock, given k transactions. Note that you can only
hold 1 share of the stock at a time; in other words, you cannot buy more than 1 share 
of the stock on any given day, and you cannot buy a share of the stock if you
are still holding another share. Note that you also don't need to use all k transactions that you're allowed.
Sample input: [5, 11, 3, 50, 60, 90], 2
Sample output: 93 (Buy: 5, Sell: 11; Buy: 3, Sell: 90)


function maxProfit(stocks,k){

}

main(stock,k)
matrix = []
for(let i = 0; i <= k; i++){
  let row = []
  for(let j = 0; j < stock.length; j++){
    row.push(0)
  }
matrix.push(row)
}

  [5,11,3,50,60,90]
0  0  0 0  0 0   0
1  0  6 6 47 57 87
2  0  




matrix[i][j] = Math.max(matrix[i][j], )

11 - 5 = 6
for(let i = 1; i <= k; i++){
  for(let j = 1; j < stocks.length; j++){
     let currentAmount = stocks[j]
     for(let k = 0; k < j; k ++){
      let prevAmount = stocks[k]
      let currProfit = currentAmount + (-prevAmount) + matrix[i - 1][k]
      matrix[i][j] = Math.max(matrix[i][j], currProfit, matrix[i][j - 1])
     }
  }
}



function maxProfit(stocks,k){
  let matrix = []
  for(let i = 0; i <= k; i++){
      let row = []
      for(let j = 0; j < stocks.length; j++){
        row.push(0)
      }
      matrix.push(row)
  }
  
  for(let i = 1; i <= k; i++){
      let maxSoFar = -Infinity
      for(let j = 1; j < stocks.length; j++){
        let currentAmount = stocks[j]
        maxSoFar = Math.max(maxSoFar, matrix[i - 1][j] - stock[j - 1])
        matrix[i][j] = Math.max(matrix[i][j], matrix[i][j - 1], maxSoFar + currentAmount)
      }
  }
  return matrix[k][stocks.length - 1]
}













Time -> O(N^2*K)
Space -> O(NK)
function maxProfitWithKTransactions(prices,k){
  let matrix= []
  for(let i = 0; i <= k; i++){
    let row = []
    for(let j = 0; j < prices.length; j++){
      row.push(0)
    }
    matrix.push(row)
  }
  
  for(let i = 1; i <= k; i++){
      let maxSoFar = -Infinity
    for(let j = 1; j < prices.length; j++){
        let currentAmount = prices[j]
        maxSoFar = Math.max(maxSoFar, matrix[i - 1][j - 1] - prices[j - 1])
        matrix[i][j] = Math.max(matrix[i][j], matrix[i][j - 1], currentAmount + maxSoFar)
    }
  }
  
return matrix[k][prices.length - 1] ? matrix[k][prices.length - 1] : 0 
}



matrix[i][k] - prices[k]





















